<?php
/*
Plugin Name: WP Leads Press
Plugin URI: http://wpleadspress.com/
Version: 1.3.0.5
Author: WP Leads Press
Author URI: http://wpleadspress.com/
Description: Replicated landing pages, lead capture and traffic distribution system for individual or a team based cooperative lead generation, complete with tracking links and random traffic rotation for team building or affiliate sales. Site admin sets up all landing pages, which replicate for all site members, giving them a simple point and click marketing system for desired affiliate programs as set by the Admin. There are endless possibilities, create membership sites for lead generation and sell coop marketing packages for leads generated by specific landing pages or even restrict random leads to members with paid status etc., with any membership plugin integration.
Text Domain: wp-leads-press
Domain Path: /languages
License: Commercial
*/

// Exit if accessed directly
if ( !defined( 'ABSPATH' ) ) exit;

// Define Plugin Version Constant
// Include required WP functions
require_once( ABSPATH . 'wp-admin/includes/plugin.php');
	
if ( !defined( 'WPLP_VERSION' ) ) {
	
	$wplp_data = get_plugin_data(__FILE__);
	$wplpVersion = $wplp_data['Version'];
	define( 'WPLP_VERSION', $wplpVersion );	

} 
// Define our plugin root path	
define( 'WPLP_ROOT', dirname(__FILE__) . '/' );


/**
 * Displays an inactive message if the API License Key has not yet been activated
 */
if ( get_option( 'wplp_activated' ) != 'Activated' ) {
    add_action( 'admin_notices', 'WPLP_API_Manager::wplp_inactive_notice' );
}

//WPLP_API_Manager
class WPLP_API_Manager {

//	*
//	 * Self Upgrade Values
//	 
	// Base URL to the remote upgrade API server
	public $upgrade_url = 'http://wpleadspress.com/'; // URL to access the Update API Manager.
	

//	*
//	 * @var string
//	 
	public $version = WPLP_VERSION;
		
//	*
//	 * @var string
//	 * This version is saved after an upgrade to compare this db version to $version
//	 
	public $wplp_version_name = 'plugin_wp_leads_press_version';

//	*
//	 * @var string
//	 
	public $plugin_url;

//	*
//	 * @var string
//	 * used to defined localization for translation, but a string literal is preferred
//	 *
//	 * https://github.com/tommcfarlin/WordPress-Plugin-Boilerplate/issues/59
//	 * http://markjaquith.wordpress.com/2011/10/06/translating-wordpress-plugins-and-themes-dont-get-clever/
//	 * http://ottopress.com/2012/internationalization-youre-probably-doing-it-wrong/
//	 
	public $text_domain = 'wp-leads-press';

//	*
//	 * Data defaults
//	 * @var mixed
//	 
	private $wplp_software_product_id;

	public $wplp_data_key;
	public $wplp_api_key;
	public $wplp_activation_email;
	public $wplp_product_id_key;
	public $wplp_instance_key;
	public $wplp_deactivate_checkbox_key;
	public $wplp_activated_key;

	public $wplp_deactivate_checkbox;
	public $wplp_activation_tab_key;
	public $wplp_deactivation_tab_key;
	public $wplp_settings_menu_title;
	public $wplp_settings_title;
	public $wplp_menu_tab_activation_title;
	public $wplp_menu_tab_deactivation_title;

	public $wplp_options;
	public $wplp_plugin_name;
	public $wplp_product_id;
	public $wplp_renew_license_url;
	public $wplp_instance_id;
	public $wplp_domain;
	public $wplp_software_version;
	public $wplp_plugin_or_theme;

	public $wplp_update_version;

	public $wplp_update_check = 'wplp_update_check';

//	*
//	 * Used to send any extra information.

//	 * @var mixed array, object, string, etc.
//	 
	public $wplp_extra;

//    *
//     * @var The single instance of the class
//     
    protected static $_instance = null;

    public static function instance() {

        if ( is_null( self::$_instance ) )
            self::$_instance = new self();

        return self::$_instance;
    }	

	public function __construct() {
			
		// Run the activation function
		register_activation_hook( __FILE__, array( $this, 'activation' ) );

		// Ready for translation
		//load_plugin_textdomain( $this->text_domain, false, dirname( untrailingslashit( plugin_basename( __FILE__ ) ) ) . '/languages' );			
			
//		if ( is_admin() ) {

//			*
//			 * Software Product ID is the product title string
//			 * This value must be unique, and it must match the API tab for the product in WooCommerce
//			 
			$this->wplp_software_product_id = __('WP Leads Press', 'wp-leads-press');

//			*
//			 * Set all data defaults here
//			 
			$this->wplp_data_key 						= 'wplp_api_manager';
			$this->wplp_api_key 						= 'wplp_api_key';
			$this->wplp_activation_email 				= 'wplp_activation_email';
			$this->wplp_product_id_key 					= 'wplp_product_id';
			$this->wplp_instance_key 					= 'wplp_instance';
			$this->wplp_deactivate_checkbox_key 		= 'wplp_deactivate_checkbox';
			$this->wplp_activated_key 					= 'wplp_activated';

//			*
//			 * Set all admin menu data
//			 
			$this->wplp_deactivate_checkbox 			= 'wplp_deactivate_checkbox';
			$this->wplp_activation_tab_key 				= 'wplp_api_manager_dashboard';
			$this->wplp_deactivation_tab_key 			= 'wplp_api_manager_deactivation';
			$this->wplp_settings_menu_title 			= 'WPLP Licensing';
			$this->wplp_settings_title 					= 'WPLP Licensing';
			$this->wplp_menu_tab_activation_title 		= __('License Activation', 'wp-leads-press');
			$this->wplp_menu_tab_deactivation_title 	= __('License Deactivation', 'wp-leads-press');

//			*
//			 * Set all software update data here
//
//			 
			$this->wplp_options 						= get_option( $this->wplp_data_key );
			$this->wplp_plugin_name 					= untrailingslashit( plugin_basename( __FILE__ ) ); // same as plugin slug. if a theme use a theme name like 'twentyeleven'			
			$this->wplp_product_id 						= get_option( $this->wplp_product_id_key ); // Software Title
			$this->wplp_renew_license_url			 	= 'https://www.wpleadspress.com/my-account'; // URL to renew a license
			$this->wplp_instance_id 					= get_option( $this->wplp_instance_key ); // Instance ID (unique to each blog activation)
			$this->wplp_domain 							= site_url(); // blog domain name
			$this->wplp_software_version 				= $this->version; // The software version
			$this->wplp_plugin_or_theme 				= 'plugin'; // 'theme' or 'plugin'
						
			// Performs activations and deactivations of API License Keys
			require_once( plugin_dir_path( __FILE__ ) . 'am/classes/class-wc-key-api.php' );
			
			$this->wplp_api_manager_key = new WPLP_Api_Manager_Key();
						
			// Checks for software updatess
			require_once( plugin_dir_path( __FILE__ ) . 'am/classes/class-wc-plugin-update.php' );

			// Admin menu with the license key and license email form
			require_once( plugin_dir_path( __FILE__ ) . 'am/admin/class-wc-api-manager-menu.php' );
			
			$options = get_option( $this->wplp_data_key );

//			*
//			 * Check for software updates
//			 
			if ( ! empty( $options ) && $options !== false ) {

				new WPLP_API_Manager_Update_API_Check(
					$this->upgrade_url,
					$this->wplp_plugin_name,
					$this->wplp_product_id,
					$this->wplp_options[$this->wplp_api_key],
					$this->wplp_options[$this->wplp_activation_email],
					$this->wplp_renew_license_url,
					$this->wplp_instance_id,
					$this->wplp_domain,
					$this->wplp_software_version,
					$this->wplp_plugin_or_theme,
					$this->text_domain
					);

			}

//		}// End is admin

		

//		*
//		 * Deletes all data if plugin deactivated
//
		 
		register_deactivation_hook( __FILE__, array( $this, 'uninstall' ) );

	}

	public function plugin_url() {
		if ( isset( $this->plugin_url ) ) return $this->plugin_url;
		return $this->plugin_url = plugins_url( '/', __FILE__ );
	}

//	*
//	 * Generate the default data arrays
//	 
	public function activation() {
		global $wpdb;

		$global_options = array(
			$this->wplp_api_key 			=> '',
			$this->wplp_activation_email 	=> '',
					);

		update_option( $this->wplp_data_key, $global_options );

		require_once( plugin_dir_path( __FILE__ ) . 'am/classes/class-wc-api-manager-passwords.php' );
		//require_once( 'class-wc-api-manager-passwords.php' );

		$WPLP_API_Password_Management = new WPLP_API_Password_Management();

		// Generate a unique installation $instance id
		$instance = $WPLP_API_Password_Management->generate_password( 12, false );

		$single_options = array(
			$this->wplp_product_id_key 				=> $this->wplp_software_product_id,
			$this->wplp_instance_key 				=> $instance,
			$this->wplp_deactivate_checkbox_key 	=> 'on',
			$this->wplp_activated_key 				=> 'Deactivated',
			);

		foreach ( $single_options as $key => $value ) {
			update_option( $key, $value );
		}

		$curr_ver = get_option( $this->wplp_version_name );
		
		// checks if the current plugin version is lower than the version being installed
		if ( version_compare( $this->version, $curr_ver, '>' ) ) {
			// update the version
			update_option( $this->wplp_version_name, $this->version );
		}

	}

//	*
//	 * Deletes all data if plugin deactivated
//	 * @return void
//	 
	public function uninstall() {
		global $wpdb, $blog_id;

		$this->license_key_deactivation();

		// Remove options
		if ( is_multisite() ) {

			switch_to_blog( $blog_id );

			foreach ( array(
					$this->wplp_data_key,
					$this->wplp_product_id_key,
					$this->wplp_instance_key,
					$this->wplp_deactivate_checkbox_key,
					$this->wplp_activated_key,
					) as $option) {

					delete_option( $option );

					}

			restore_current_blog();

		} else {

			foreach ( array(
					$this->wplp_data_key,
					$this->wplp_product_id_key,
					$this->wplp_instance_key,
					$this->wplp_deactivate_checkbox_key,
					$this->wplp_activated_key
					) as $option) {

					delete_option( $option );

					}

		}

	}

//	*
//	 * Deactivates the license on the API server
//	 * @return void
//	 
	public function license_key_deactivation() {

		$activation_status = get_option( $this->wplp_activated_key );

		$api_email = $this->wplp_options[$this->wplp_activation_email];
		$api_key = $this->wplp_options[$this->wplp_api_key];

		$args = array(
			'email' => $api_email,
			'licence_key' => $api_key,
			);

		if ( $activation_status == 'Activated' && $api_key != '' && $api_email != '' ) {
			$this->wplp_api_manager_key->deactivate( $args ); // reset license key activation
		}
	}

//    *
//     * Displays an inactive notice when the software is inactive.
//     
	public static function wplp_inactive_notice() { ?>
		<?php if ( ! current_user_can( 'manage_options' ) ) return; ?>
		<?php if ( isset( $_GET['page'] ) && 'api_manager_example_dashboard' == $_GET['page'] ) return; ?>
		<div id="message" class="error">
			<p><?php printf( __( 'A WP Leads Press License Key has not been activated on this domain, the plugin is currently inactive. %sClick here%s to activate a license key on this domain.', 'wp-leads-press' ), '<a href="' . esc_url( admin_url( 'options-general.php?page=wplp_api_manager_dashboard' ) ) . '">', '</a>' ); ?></p>
		</div>
		<?php
	}	
	
} // End of class

function WPLP(){
    return WPLP_API_Manager::instance();
}

// Initialize the class instance only once
WPLP();


/**
 * Initialize WPLP
 */  		

// Include Sunrise Plugin Framework class
require_once( WPLP_ROOT . 'classes/sunrise.php' );

function wp_leads_press_init(){	
	
	// Make plugin available for translation
	//load_plugin_textdomain( 'wp-leads-press', false, WPLP_ROOT . 'languages/' );
	load_plugin_textdomain( 'wp-leads-press', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );	
	
	// Include wplp list table manage members class
	require_once( WPLP_ROOT . 'classes/wplp_list_table_manage_members_class.php' );
	
	// Include wplp admin views class
	require_once( WPLP_ROOT . 'classes/wplp_admin_views_class.php' );
	
	// Include phpMailer Classes
	require_once( ABSPATH . WPINC . '/class-phpmailer.php' );
	require_once( ABSPATH . WPINC . '/class-smtp.php' );
	
	// Include WordPress Functions file, work around for hosts which somehow drop access to function.php... REALLY? ;) 
	require_once( ABSPATH . WPINC . '/functions.php' );
	
	// Enqueue Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/enqueue-functions.php' );

	// Query Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/query-functions.php' );
	
	// User Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/user-functions.php' );
	
	// Cookie Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/cookie-functions.php' );	

	// BuddyPress Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/buddypress-functions.php' );	

	// Itthinx Affiliates Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/itthinx-affiliates-functions.php' );

	// iDevAffiliate Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/idevaffiliate-functions.php' );
	
	// Create Lead Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/create-lead-functions.php' );	
	
	// Autoresponder Integration Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/autoresponder-functions.php' );	

	// Autoresponder API - Integrations
	
	// Get Response
	require_once( WPLP_ROOT . 'inc/wplp-functions/email-api-integrations/get-response/getresponse-api-functions.php' );	
	
	// Aweber
	require_once( WPLP_ROOT . 'inc/wplp-functions/email-api-integrations/aweber/aweber-api-functions.php' );		
		
	// Lead Management Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/lead-management-functions.php' );	

	// Create Member Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/create-member-functions.php' );

	// Email Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/email-functions.php' );	

	// Traffic Redirect Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/traffic-redirect-functions.php' );			
	
	// Unsubscribe Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/unsubscribe-functions.php' );					

	// Utility Functions
	require_once( WPLP_ROOT . 'inc/wplp-functions/utility-functions.php' );	
			
	// Include Shortcodes
	require_once( WPLP_ROOT . 'inc/wplp-shortcodes/shortcodes-leads.php' );
	require_once( WPLP_ROOT . 'inc/wplp-shortcodes/shortcodes-traffic.php' );
	require_once( WPLP_ROOT . 'inc/wplp-shortcodes/shortcodes-users.php' );
	
	// Include Custom Post Types
	require_once( WPLP_ROOT . 'inc/wplp-functions/wplp-custom-post-types.php' );	

	// Settings framework
	require_once( WPLP_ROOT . 'inc/sunrise/options.php');

	// Initialize Sunrise instance args
	$wplp_admin = new Sunrise6( array(
			'file'       => __FILE__,
			'slug'       => 'wp-leads-press',
			'prefix'     => 'wp_leads_press_',
			'textdomain' => 'wp-leads-press',
			'css'        => 'assets/css',
			'js'         => 'assets/js'
		) ); 	

	// Add top-level menu
	$wplp_admin->add_menu( array(
			'page_title'  => __( 'WP Leads Press', 'wp-leads-press' ), // Settings page <title>
			'menu_title'  => __( 'WP Leads Press', 'wp-leads-press' ), // Menu title, will be shown in left dashboard menu
			'capability'  => 'manage_options', // Minimal user capability to access this page
			'slug'        => 'wp-leads-press', // Unique page slug
			'icon_url'    => admin_url( 'images/media-button-image.gif' ), // Add custom icon url
			'position'    => '98.6', // Menu position from 80 to <infinity>, you can use decimals
			'options'     => $options_dashboard // Array with options available on this page
		) );

	// Add sub-menu to rename second menu item to Dashboard, using the options form main menu for display
	$wplp_admin->add_submenu( array(
			'page_title'  => __( 'WP Leads Press: Dashboard', 'wp-leads-press' ), // Settings page <title>
			'menu_title'  => __( 'Dashboard', 'wp-leads-press' ), // Menu title, will be shown in left dashboard menu
			'slug'        => 'wp-leads-press', // Unique page slug, you can use here the slug of parent page, which you've already created
			'parent_slug' => 'wp-leads-press', // Slug of the parent page (see above)
			'options'     => array(

				array(

					//'type' => 'manage_members',

					//'callback' => array( 'Sunrise6_Views', 'manage_members' )

				)

			)		) );		

	// Add sub-menu - Manage Members
	$wplp_admin->add_submenu( array(
			'page_title'  => __( 'WP Leads Press: Manage Members', 'wp-leads-press' ), // Settings page <title>
			'menu_title'  => __( 'Manage Members', 'wp-leads-press' ), // Menu title, will be shown in left dashboard menu
			'slug'        => 'wp-leads-press-manage-members', // Unique page slug, you can use here the slug of parent page, which you've already created
			'parent_slug' => 'wp-leads-press', // Slug of the parent page (see above)
			'options'     => array(

				array(

					'type' => 'manage_members',
					'callback' => array( 'WplpAdminViews', 'manage_members' ) // Calls manage_members function from class

				)

			)		) );

	// Add sub-menu - Settings
	$wplp_admin->add_submenu( array(
			'page_title'  => __( 'WP Leads Press: Settings', 'wp-leads-press' ), // Settings page <title>
			'menu_title'  => __( 'Settings', 'wp-leads-press' ), // Menu title, will be shown in left dashboard menu
			'slug'        => 'wp-leads-press-settings', // Unique page slug, you can use here the slug of parent page, which you've already created
			'parent_slug' => 'wp-leads-press', // Slug of the parent page (see above)
			'options'     => $options_settings // Array with options available on this page
		) );
	
	// Flush rewite
	register_activation_hook( __FILE__, 'wplp_rewrite_flush' );
	function wplp_rewrite_flush() {
		
		wplp_lead();
		wplp_campaign();
		flush_rewrite_rules();
		
	}
	
	// Register Deactivation hook
	register_deactivation_hook( __FILE__, 'wplp_deactivate' );	
	function wplp_deactivate() {
		
		flush_rewrite_rules();
		
	}
	
	// Register activation hook
	register_activation_hook( __FILE__, 'wplp_flush_rules' ); # Runs only on plugin activation... GOOD!
	function wplp_flush_rules(){
		global $wp_rewrite;
		$wp_rewrite->flush_rules();
	}

}
// Execute when plugins loaded
add_action( 'plugins_loaded', 'wp_leads_press_init' );

?>